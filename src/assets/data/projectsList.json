{
  "projects_list": [
    {
      "id": 0,
      "img_url": "../../../dist/images/projects/portfoliomain.png",
      "project_name": "포트폴리오 사이트",
      "activity_type": "개인 프로젝트",
      "project_introduction": "React와 TypeScript를 기반으로 제작한 포트폴리오 사이트",
      "github_url": "https://github.com/seyoung97/seyoung-portfolio",
      "distribute_url": "0",
      "blog_url": "0",
      "details": {
        "breif_info": {
          "introduction": "2주일 동안 정육각 페이지의 모든 기능을 직접 구현해보는 클론 프로젝트입니다.",
          "period": "2022/08/29 ~ 2022/09/09",
          "team": "Backend 2명, Frontend 3명"
        },
        "project_introduction": [
          "육류 판매 전문 인커머스 사이트인 정육각 페이지의 모든 기능을 직접 구현하는 프로젝트입니다.",
          "모두의 공방에서 제공하는 주요 기능은 맞춤 제작을 문의할 수 있는 맞춤 제작소와 이미 만들어진 제품을 옵션에 따라 구매할 수 있는 디자인마켓으로 이루어져있습니다.",
          "저희는 디자인마켓의 다양한 옵션 선택 기능과 필터링 기능을 구현해보고 싶어서 모두의 공방을 선택했습니다."
        ],
        "links": [
          {
            "link_name": "프론트엔드 레포",
            "link_url": "https://github.com/wecode-bootcamp-korea/justcode-6-2nd-team4-front"
          },
          {
            "link_name": "백엔드 레포",
            "link_url": "https://github.com/wecode-bootcamp-korea/justcode-6-2nd-team4-back"
          },
          {
            "link_name": "팀 노션",
            "link_url": "https://www.notion.so/wecode/4-7769dc42856248299aa5d32009b313e9"
          },
          {
            "link_name": "회고록",
            "link_url": "https://velog.io/@seeyong_0/%EC%82%AC%EC%A1%B0%EC%9D%98-%EA%B3%B5%EB%B0%A9Justcode-2%EC%B0%A8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0%EB%A1%9D"
          }
        ],
        "video_url": "https://www.youtube.com/watch?v=0NputbNx3_s",
        "tech_stack": [
          {
            "position": "Front End",
            "skills": [
              "HTML",
              "Sass",
              "Javascript",
              "React",
              "CRA",
              "React-router",
              "axios",
              "Font Awesome"
            ]
          },
          {
            "position": "Back End",
            "skills": ["Node.js", "Express.js", "MYSQL"]
          },
          {
            "position": "Communication",
            "skills": ["Slack", "Notion", "Zep"]
          }
        ],
        "structure": {
          "img_url": [
            "/public/images/projects/structure/modu/cart_structure.png",
            "/public/images/projects/structure/modu/itemcard_structure.png",
            "/public/images/projects/structure/modu/navigationbar_structure.png",
            "/public/images/projects/structure/modu/modu_pages.png"
          ],
          "explain": [
            "모든 컴포넌트들은 components 폴더 내에서 관리했고 components 폴더 하위에 기능별로 폴더들을 만들어서 파일들을 분류했습니다.",
            "페이지들은 pages 폴더 에서 관리했고 components들을 조립하여 하나의 페이지가 구성 될 수 있도록 했습니다.",
            "빨강색 글자로 적혀진 폴더는 본인이 담당했던 페이지들 입니다."
          ]
        },
        "cooperation": [
          {
            "title": "Planning Meeting 1: 주제선정,범위설정",
            "content": [
              "각자 2개 이상의 웹페이지를 찾아와서 소개하는 시간을 가졌습니다.",
              "투표를 통해 모두의 공방을 클론 페이지로 선정했습니다. 일반적인 이커머스가 아닌 맞춤 제작이라는 점에서 다양한 옵션 선택 기능이나 필터링 기능을 구현해볼 수 있는 기회라고 생각해서 선택했습니다.",
              "함께 웹사이트를 둘러보면서 주요 기능과 사이트의 흐름을 파악했습니다.",
              "시간 제약이 있는 만큼 구현할 기능과 제외할 기능들을 명확하게 나눴습니다. 저희는 우선 디자인 마켓의 주요 기능들을 구현한 후 시간이 있다면 맞춤제작소의 채팅 기능까지 구현하는 것을 목표로 설정했습니다."
            ]
          },
          {
            "title": "Planning Meeting 2: 역할 분담, 컨벤션",
            "content": [
              "각자 원하는 기능을 소개하고 겹치는 부분이 있으면 조율하면서 역할을 분담했습니다.",
              "코드 컨벤션과 Git 컨벤션을 정리했습니다. ",
              "Git 컨벤션의 경우 Header, body, Footer 구조로 작성했습니다."
            ]
          },
          {
            "title": "Planning Meeting 3: 새로운 기획 회의",
            "content": [
              "클론 페이지인 모두의 공방이 리뉴얼에 들어가서 UI가 제대로 보이지 않는 문제가 발생되어 이를 해결하기 위해 3번 째 플래닝 미팅을 갖게 되었습니다.",
              "모두의 공방 측에 문의해본 결과 리뉴얼 기간이 2~3개월 정도 될것이라는 답변을 받았고 기다리고만 있을 수 없다는 판단을 내렸습니다. 이미 어느정도 프로젝트가 진행된 상황이었기 때문에 다른 사이트를 찾는 것 보다 저희가 직접 기획 및 디자인을하여 우리들만의 사이트를 만들기로 했습니다.",
              "비슷한 형태의 웹사이트인 오늘의 집, 무신사 등 웹사이트들의 UI를 같이 분석하고 차용하면 괜찮을 부분들을 참고해 제작했습니다. 핀터레스트에서 웹페이지 디자인을 검색해 참고하는 것도 많은 도움이 되었습니다.",
              "리뉴얼 이슈가 발생하여 시간이 부족할 것 같다는 판단을 내렸고 맞춤 제작소 부분은 과감히 제외시켰습니다. 대신에 제작자 페이지를 만들어서 팀원들의 프로필을 넣어 우리만의 공방 페이지를 만들었습니다.",
              "팀원들에게 UI 피드백을 수시로 받으며 직관적인 UI를 구현하기 위해 노력했습니다."
            ]
          },
          {
            "title": "Daily Stand-Up meeting",
            "content": [
              "프로젝트 진행 기간동안 매일 오후 2시에 30분 내외로 스탠드업미팅을 진행했습니다.",
              "진행상황을 공유하고 공유해야할 이슈를 공유했습니다."
            ]
          },
          {
            "title": "GIT Flow 방식",
            "content": [
              "개발 사항을 main 브랜치에 병합하지 않고 develop 브랜치에 병합하고 마지막에 main branch에 병합했습니다.",
              "새로운 UI 또는 기능을 구현할 때 또는 발견된 버그를 처리할 때 마다 Issue를 등록해 팀원들의 진행상황을 tracking 할 수 있도록했습니다.",
              "Issue를 등록할 때 태그를 적극적으로 활용했고 작업 내용을 구체적으로 작성했습니다.",
              "commit을 남길 때 헤더-바디-푸터 구조로 작성하여 작업 내용을 세세하게 기록할 수 있도록 했습니다. 푸터에 Issue 번호를 적어서 어떤 Issue에 속한 작업인지 기록했습니다.",
              "PR은 하나의 Issue가 완료 될 때 마다 올렸습니다. PR이 Issue와 연동되도록했습니다."
            ]
          }
        ],
        "Feature": [
          {
            "page_name": "메인 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-mainpage.gif",
            "features": [
              {
                "feature_name": "Drop down menu",
                "code_img": [
                  "/public/images/projects/features/modu/modu-dropdownmenu.png"
                ],
                "explain": [
                  "조건부 함수와 MouseEnter 이벤트를 활용해 드롭다운 메뉴를 구현했습니다."
                ]
              },
              {
                "feature_name": "Carousel 베너 광고",
                "code_img": [
                  "/public/images/projects/features/modu/modu-carousel.png"
                ],
                "explain": [
                  "swiper 라이브러리를 사용해 베너 광고 부분을 carousel로 구현했습니다.",
                  "참고 사이트가 리뉴얼에 들어가서 참고할 이미지가 없었습니다. 핀터레스트에 베너 광고 이미지들을 검색해서 디자인을 참고하여 직접 제작했습니다."
                ]
              },
              {
                "feature_name": "신상품 및 인기상품 리스트 ",
                "code_img": [
                  "/public/images/projects/features/modu/modu-mainpagelist.png"
                ],
                "explain": [
                  "신상품과 인기상품 리스트부분은 라이브러리를 따로 사용하지 않고 JavaScript로 직접 슬라이드 기능을 구현했습니다.",
                  "아이템카드 컴포넌트를 재사용하여 리스트를 구현했습니다.",
                  "표현식과 useParams를 활용해 상품을 클릭했을 때 해당 상품의 상세페이지로 넘어갈 수 있도록 동적라우팅을 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "상품 리스트 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-category.gif",
            "features": [
              {
                "feature_name": "정렬 기능",
                "code_img": [
                  "/public/images/projects/features/modu/modu-ordering.png"
                ],
                "explain": [
                  "백엔드와 통신하여 추천순, 판매량순, 낮은 가격순 , 높은 가격 순 정렬기능을 구현했습니다.",
                  "정렬조건이 바뀔 때 마다 state값이 변경 되도록 하고 이 state 값을 통신 요청 URI에 표현식으로 넣어서",
                  "state 값이 변경 되면 요청 URI가 변경되어 조건에 맞는 정렬 순서대로 데이터를 받아와 출력하도록 구현했습니다."
                ]
              },
              {
                "feature_name": "무한스크롤 기능",
                "code_img": [
                  "/public/images/projects/features/modu/modu-infinitescroll.png"
                ],
                "explain": [
                  "windows의 scroll height 와 scroll event를 활용하여 무한스크롤 기능을 구현했습니다.",
                  "스크롤이 끝에 닿을 때 마다 offset이라는 state를 1씩 증가되게 하고 이 offset을 요청 URI에 표현식으로 넣어서 계속해서 추가로 데이터를 요청하도록 구현했습니다.",
                  "하지만 데이터의 양이 한정적이어서 실제로는 한번 밖에 상품 리스트가 추가되지 않아 이 부분이 아쉬웠습니다.",
                  "useEffect의 의존성 배열과 표현식, return함수를 활용해 정렬기능이 적용된 상태에서 무한스크롤이 작동할 수 있도록 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "장바구니 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-cart.gif",
            "features": [
              {
                "feature_name": "장바구니 수량변경, 삭제 기능 구현",
                "code_img": [
                  "/public/images/projects/features/modu/modu-cart.png"
                ],
                "explain": [
                  "버튼에 value값을 부여해 해당 아이템의 수량/가격만 변동및 삭제되도록 구현했습니다.",
                  "map함수와 reduce함수를 사용해 제품가격, 총배송비, 총결제가격을 표시하고 변동을 트래킹할 수 있도록 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "제작자 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-developer.gif",
            "features": [
              {
                "feature_name": "팀원 프로필 카드 제작",
                "code_img": [
                  "/public/images/projects/features/modu/modu-developers.png"
                ],
                "explain": [
                  "팀원들의 아바타를 아이폰 이모지 기능을 활용해 직접 제작했습니다.",
                  "새로운 파일을 생성하지 않고 itemCard 컴포넌트를 재사용하여 구현했습니다."
                ]
              }
            ]
          }
        ],
        "Trouble_Shooting": [
          {
            "title": "클론 페이지 리뉴얼 이슈",
            "explain": [
              "프로젝트를 시작하고 얼마 지나지 않아 모두의 공방 페이지가 리뉴얼에 들어가서 UI 및 기능들이 보이지 않았습니다.",
              "프론트 개발자에게는 눈을 감고 개발을 하라는 격이었기 때문에 상당히 당황스러웠습니다."
            ],
            "subtitle": "문제 상황 파악",
            "figure_out": [
              "먼저 모두의 공방 고객센터에 전화해 상황을 파악했습니다. 대대적으로 리뉴얼에 들어갔기 때문에 2개월 정도 소요된다는 답변을 받았고 기다리고만 있을 수 없다는 판단을 내렸습니다.",
              "결국 저희만의 사이트를 만들기로 결정했고 팀원들과 자주 소통하며 디자인 부터 기능까지 저희가 직접 기획하고 구현했습니다."
            ],
            "subtitle_2": "문제 해결 과정",
            "problem_solving": [
              "저희는 먼저 구현할 기능들을 명확하게  정했습니다. 마이페이지의 경우 user의 정보와 구매 목록 및 찜 목록을 출력하고 구매 목록에서 ‘리뷰 작성하기’ 버튼을 누르면 해당 상품의 리뷰를 작성할 수 있도록 리뷰작성 페이지로 넘어가도록 하는 목표를 세웠습니다.",
              "그리고 목표와 유사한 웹페이지가 있는지 조사를 했습니다. 그 결과 무신사의 마이페이지가 저희가 기획한 바와 유사하게 구성이 되어있었습니다. 이에 무신사의 마이페이지를 참고하여 제작하기로 결정했습니다.",
              "장바구니 페이지의 경우 수량 변경 및 삭제 그리고 배송비와 전체 가격을 따로 계산하는 것을 목표로 했습니다.",
              "참고할 사이트를 조사하다가 오늘의 집의 장바구니 페이지가 저희 프로젝트와 디자인 무드도 잘 맞고 배송비 및 전체 가격 표시 되는 부분이 깔끔해서 오늘의 집을 참고하여 제작하기로 결정했습니다. "
            ],
            "subtitle_3": "느낀점",
            "lesson": [
              "처음에는 당황스러웠지만 직접 기획을하면서 사용자의 입장에서 서비스를 구축해볼 수 있는 좋은 기회였습니다. "
            ]
          }
        ],
        "Level_up": [
          "Git flow 방식으로 협업하는 방법을 배울 수 있었습니다.",
          "component 재사용의 편리성에 대해 느낄 수 있었습니다",
          "useEffect의 dependency array를 활용한 동적라우팅",
          "백엔드와 소통하여 offset & limit을 설정, 무한 스크롤 구현",
          "windows height를 활용하여 무한스크롤 구현"
        ],
        "review": [
          {
            "sub_titile": "클린코드의 중요성",
            "explain": [
              "그동안에는 구현에 집중하느라 클린 코딩의 중요성에 대해 생각할 겨를이 없었는데 이번 프로젝트는 팀원들의 코드들도 뜯어보면서 많이 배울 수 있었습니다. 특히 API 파일을 따로 관리해 임포트해서 쓰는 방식을 보고 다음 프로젝트 때 적용해봐야겠다 생각했습니다."
            ]
          },
          {
            "sub_titile": "최적화에 대하여...",
            "explain": [
              "리액트는 배울수록 아직 배울게 많다는 것을 느낍니다. 특히 최적화에 대한 이해도가 부족하다고 느껴 최적화에 대해 공부할 필요가 있다고 생각했습니다. 또한 프론트엔드 개발자에게 SEO도 정말 중요한데 다음 프로젝트 때는 최적화와 SEO 모두 신경 써서 작업해봐야겠다 생각했습니다."
            ]
          }
        ]
      }
    },
    {
      "id": 1,
      "img_url": "/public/images/projects/modumain.png",
      "project_name": "사조의 공방 프로젝트",
      "activity_type": "JUST CODE 6기",
      "project_introduction": "맞춤제작 전문 플랫폼 모두의 공방을 참고해 디자인 및 기능을 직접 구현",
      "github_url": "https://github.com/seyoung97/justcode-6-2nd-team4-front",
      "distribute_url": "0",
      "blog_url": "https://velog.io/@seeyong_0/%EC%82%AC%EC%A1%B0%EC%9D%98-%EA%B3%B5%EB%B0%A9Justcode-2%EC%B0%A8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0%EB%A1%9D",
      "details": {
        "breif_info": {
          "introduction": "2주일 동안 모두의공방 페이지의 모든 기능을 직접 구현해보는 클론 프로젝트입니다.",
          "period": "2022/09/19 ~ 2022/09/30",
          "team": "Backend 2명, Frontend 3명"
        },
        "project_introduction": [
          "모두의 공방은 원하는 공방을 쉽고 빠르게 찾을 수 있는 맞춤 제작 전문 플랫폼입니다.",
          "모두의 공방에서 제공하는 주요 기능은 맞춤 제작을 문의할 수 있는 맞춤 제작소와 이미 만들어진 제품을 옵션에 따라 구매할 수 있는 디자인마켓으로 이루어져있습니다.",
          "저희는 디자인마켓의 다양한 옵션 선택 기능과 필터링 기능을 구현해보고 싶어서 모두의 공방을 선택했습니다."
        ],
        "links": [
          {
            "link_name": "프론트엔드 레포",
            "link_url": "https://github.com/wecode-bootcamp-korea/justcode-6-2nd-team4-front"
          },
          {
            "link_name": "백엔드 레포",
            "link_url": "https://github.com/wecode-bootcamp-korea/justcode-6-2nd-team4-back"
          },
          {
            "link_name": "팀 노션",
            "link_url": "https://www.notion.so/wecode/4-7769dc42856248299aa5d32009b313e9"
          },
          {
            "link_name": "회고록",
            "link_url": "https://velog.io/@seeyong_0/%EC%82%AC%EC%A1%B0%EC%9D%98-%EA%B3%B5%EB%B0%A9Justcode-2%EC%B0%A8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0%EB%A1%9D"
          }
        ],
        "video_url": "https://www.youtube.com/watch?v=0NputbNx3_s",
        "tech_stack": [
          {
            "position": "Front End",
            "skills": [
              "HTML",
              "Sass",
              "Javascript",
              "React",
              "CRA",
              "React-router",
              "axios",
              "Font Awesome"
            ]
          },
          {
            "position": "Back End",
            "skills": ["Node.js", "Express.js", "MYSQL"]
          },
          {
            "position": "Communication",
            "skills": ["Slack", "Notion", "Zep"]
          }
        ],
        "structure": {
          "img_url": [
            "/public/images/projects/structure/modu/cart_structure.png",
            "/public/images/projects/structure/modu/itemcard_structure.png",
            "/public/images/projects/structure/modu/navigationbar_structure.png",
            "/public/images/projects/structure/modu/modu_pages.png"
          ],
          "explain": [
            "모든 컴포넌트들은 components 폴더 내에서 관리했고 components 폴더 하위에 기능별로 폴더들을 만들어서 파일들을 분류했습니다.",
            "페이지들은 pages 폴더 에서 관리했고 components들을 조립하여 하나의 페이지가 구성 될 수 있도록 했습니다.",
            "빨강색 글자로 적혀진 폴더는 본인이 담당했던 페이지들 입니다."
          ]
        },
        "cooperation": [
          {
            "title": "Planning Meeting 1: 주제선정,범위설정",
            "content": [
              "각자 2개 이상의 웹페이지를 찾아와서 소개하는 시간을 가졌습니다.",
              "투표를 통해 모두의 공방을 클론 페이지로 선정했습니다. 일반적인 이커머스가 아닌 맞춤 제작이라는 점에서 다양한 옵션 선택 기능이나 필터링 기능을 구현해볼 수 있는 기회라고 생각해서 선택했습니다.",
              "함께 웹사이트를 둘러보면서 주요 기능과 사이트의 흐름을 파악했습니다.",
              "시간 제약이 있는 만큼 구현할 기능과 제외할 기능들을 명확하게 나눴습니다. 저희는 우선 디자인 마켓의 주요 기능들을 구현한 후 시간이 있다면 맞춤제작소의 채팅 기능까지 구현하는 것을 목표로 설정했습니다."
            ]
          },
          {
            "title": "Planning Meeting 2: 역할 분담, 컨벤션",
            "content": [
              "각자 원하는 기능을 소개하고 겹치는 부분이 있으면 조율하면서 역할을 분담했습니다.",
              "코드 컨벤션과 Git 컨벤션을 정리했습니다. ",
              "Git 컨벤션의 경우 Header, body, Footer 구조로 작성했습니다."
            ]
          },
          {
            "title": "Planning Meeting 3: 새로운 기획 회의",
            "content": [
              "클론 페이지인 모두의 공방이 리뉴얼에 들어가서 UI가 제대로 보이지 않는 문제가 발생되어 이를 해결하기 위해 3번 째 플래닝 미팅을 갖게 되었습니다.",
              "모두의 공방 측에 문의해본 결과 리뉴얼 기간이 2~3개월 정도 될것이라는 답변을 받았고 기다리고만 있을 수 없다는 판단을 내렸습니다. 이미 어느정도 프로젝트가 진행된 상황이었기 때문에 다른 사이트를 찾는 것 보다 저희가 직접 기획 및 디자인을하여 우리들만의 사이트를 만들기로 했습니다.",
              "비슷한 형태의 웹사이트인 오늘의 집, 무신사 등 웹사이트들의 UI를 같이 분석하고 차용하면 괜찮을 부분들을 참고해 제작했습니다. 핀터레스트에서 웹페이지 디자인을 검색해 참고하는 것도 많은 도움이 되었습니다.",
              "리뉴얼 이슈가 발생하여 시간이 부족할 것 같다는 판단을 내렸고 맞춤 제작소 부분은 과감히 제외시켰습니다. 대신에 제작자 페이지를 만들어서 팀원들의 프로필을 넣어 우리만의 공방 페이지를 만들었습니다.",
              "팀원들에게 UI 피드백을 수시로 받으며 직관적인 UI를 구현하기 위해 노력했습니다."
            ]
          },
          {
            "title": "Daily Stand-Up meeting",
            "content": [
              "프로젝트 진행 기간동안 매일 오후 2시에 30분 내외로 스탠드업미팅을 진행했습니다.",
              "진행상황을 공유하고 공유해야할 이슈를 공유했습니다."
            ]
          },
          {
            "title": "GIT Flow 방식",
            "content": [
              "개발 사항을 main 브랜치에 병합하지 않고 develop 브랜치에 병합하고 마지막에 main branch에 병합했습니다.",
              "새로운 UI 또는 기능을 구현할 때 또는 발견된 버그를 처리할 때 마다 Issue를 등록해 팀원들의 진행상황을 tracking 할 수 있도록했습니다.",
              "Issue를 등록할 때 태그를 적극적으로 활용했고 작업 내용을 구체적으로 작성했습니다.",
              "commit을 남길 때 헤더-바디-푸터 구조로 작성하여 작업 내용을 세세하게 기록할 수 있도록 했습니다. 푸터에 Issue 번호를 적어서 어떤 Issue에 속한 작업인지 기록했습니다.",
              "PR은 하나의 Issue가 완료 될 때 마다 올렸습니다. PR이 Issue와 연동되도록했습니다."
            ]
          }
        ],
        "Feature": [
          {
            "page_name": "메인 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-mainpage.gif",
            "features": [
              {
                "feature_name": "Drop down menu",
                "code_img": [
                  "/public/images/projects/features/modu/modu-dropdownmenu.png"
                ],
                "explain": [
                  "조건부 함수와 MouseEnter 이벤트를 활용해 드롭다운 메뉴를 구현했습니다."
                ]
              },
              {
                "feature_name": "Carousel 베너 광고",
                "code_img": [
                  "/public/images/projects/features/modu/modu-carousel.png"
                ],
                "explain": [
                  "swiper 라이브러리를 사용해 베너 광고 부분을 carousel로 구현했습니다.",
                  "참고 사이트가 리뉴얼에 들어가서 참고할 이미지가 없었습니다. 핀터레스트에 베너 광고 이미지들을 검색해서 디자인을 참고하여 직접 제작했습니다."
                ]
              },
              {
                "feature_name": "신상품 및 인기상품 리스트 ",
                "code_img": [
                  "/public/images/projects/features/modu/modu-mainpagelist.png"
                ],
                "explain": [
                  "신상품과 인기상품 리스트부분은 라이브러리를 따로 사용하지 않고 JavaScript로 직접 슬라이드 기능을 구현했습니다.",
                  "아이템카드 컴포넌트를 재사용하여 리스트를 구현했습니다.",
                  "표현식과 useParams를 활용해 상품을 클릭했을 때 해당 상품의 상세페이지로 넘어갈 수 있도록 동적라우팅을 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "상품 리스트 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-category.gif",
            "features": [
              {
                "feature_name": "정렬 기능",
                "code_img": [
                  "/public/images/projects/features/modu/modu-ordering.png"
                ],
                "explain": [
                  "백엔드와 통신하여 추천순, 판매량순, 낮은 가격순 , 높은 가격 순 정렬기능을 구현했습니다.",
                  "정렬조건이 바뀔 때 마다 state값이 변경 되도록 하고 이 state 값을 통신 요청 URI에 표현식으로 넣어서",
                  "state 값이 변경 되면 요청 URI가 변경되어 조건에 맞는 정렬 순서대로 데이터를 받아와 출력하도록 구현했습니다."
                ]
              },
              {
                "feature_name": "무한스크롤 기능",
                "code_img": [
                  "/public/images/projects/features/modu/modu-infinitescroll.png"
                ],
                "explain": [
                  "windows의 scroll height 와 scroll event를 활용하여 무한스크롤 기능을 구현했습니다.",
                  "스크롤이 끝에 닿을 때 마다 offset이라는 state를 1씩 증가되게 하고 이 offset을 요청 URI에 표현식으로 넣어서 계속해서 추가로 데이터를 요청하도록 구현했습니다.",
                  "하지만 데이터의 양이 한정적이어서 실제로는 한번 밖에 상품 리스트가 추가되지 않아 이 부분이 아쉬웠습니다.",
                  "useEffect의 의존성 배열과 표현식, return함수를 활용해 정렬기능이 적용된 상태에서 무한스크롤이 작동할 수 있도록 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "장바구니 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-cart.gif",
            "features": [
              {
                "feature_name": "장바구니 수량변경, 삭제 기능 구현",
                "code_img": [
                  "/public/images/projects/features/modu/modu-cart.png"
                ],
                "explain": [
                  "버튼에 value값을 부여해 해당 아이템의 수량/가격만 변동및 삭제되도록 구현했습니다.",
                  "map함수와 reduce함수를 사용해 제품가격, 총배송비, 총결제가격을 표시하고 변동을 트래킹할 수 있도록 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "제작자 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-developer.gif",
            "features": [
              {
                "feature_name": "팀원 프로필 카드 제작",
                "code_img": [
                  "/public/images/projects/features/modu/modu-developers.png"
                ],
                "explain": [
                  "팀원들의 아바타를 아이폰 이모지 기능을 활용해 직접 제작했습니다.",
                  "새로운 파일을 생성하지 않고 itemCard 컴포넌트를 재사용하여 구현했습니다."
                ]
              }
            ]
          }
        ],
        "Trouble_Shooting": [
          {
            "title": "클론 페이지 리뉴얼 이슈",
            "explain": [
              "프로젝트를 시작하고 얼마 지나지 않아 모두의 공방 페이지가 리뉴얼에 들어가서 UI 및 기능들이 보이지 않았습니다.",
              "프론트 개발자에게는 눈을 감고 개발을 하라는 격이었기 때문에 상당히 당황스러웠습니다."
            ],
            "subtitle": "문제 상황 파악",
            "figure_out": [
              "먼저 모두의 공방 고객센터에 전화해 상황을 파악했습니다. 대대적으로 리뉴얼에 들어갔기 때문에 2개월 정도 소요된다는 답변을 받았고 기다리고만 있을 수 없다는 판단을 내렸습니다.",
              "결국 저희만의 사이트를 만들기로 결정했고 팀원들과 자주 소통하며 디자인 부터 기능까지 저희가 직접 기획하고 구현했습니다."
            ],
            "subtitle_2": "문제 해결 과정",
            "problem_solving": [
              "저희는 먼저 구현할 기능들을 명확하게  정했습니다. 마이페이지의 경우 user의 정보와 구매 목록 및 찜 목록을 출력하고 구매 목록에서 ‘리뷰 작성하기’ 버튼을 누르면 해당 상품의 리뷰를 작성할 수 있도록 리뷰작성 페이지로 넘어가도록 하는 목표를 세웠습니다.",
              "그리고 목표와 유사한 웹페이지가 있는지 조사를 했습니다. 그 결과 무신사의 마이페이지가 저희가 기획한 바와 유사하게 구성이 되어있었습니다. 이에 무신사의 마이페이지를 참고하여 제작하기로 결정했습니다.",
              "장바구니 페이지의 경우 수량 변경 및 삭제 그리고 배송비와 전체 가격을 따로 계산하는 것을 목표로 했습니다.",
              "참고할 사이트를 조사하다가 오늘의 집의 장바구니 페이지가 저희 프로젝트와 디자인 무드도 잘 맞고 배송비 및 전체 가격 표시 되는 부분이 깔끔해서 오늘의 집을 참고하여 제작하기로 결정했습니다. "
            ],
            "subtitle_3": "느낀점",
            "lesson": [
              "처음에는 당황스러웠지만 직접 기획을하면서 사용자의 입장에서 서비스를 구축해볼 수 있는 좋은 기회였습니다. "
            ]
          }
        ],
        "Level_up": [
          "Git flow 방식으로 협업하는 방법을 배울 수 있었습니다.",
          "component 재사용의 편리성에 대해 느낄 수 있었습니다",
          "useEffect의 dependency array를 활용한 동적라우팅",
          "백엔드와 소통하여 offset & limit을 설정, 무한 스크롤 구현",
          "windows height를 활용하여 무한스크롤 구현"
        ],
        "review": [
          {
            "sub_titile": "클린코드의 중요성",
            "explain": [
              "그동안에는 구현에 집중하느라 클린 코딩의 중요성에 대해 생각할 겨를이 없었는데 이번 프로젝트는 팀원들의 코드들도 뜯어보면서 많이 배울 수 있었습니다. 특히 API 파일을 따로 관리해 임포트해서 쓰는 방식을 보고 다음 프로젝트 때 적용해봐야겠다 생각했습니다."
            ]
          },
          {
            "sub_titile": "최적화에 대하여...",
            "explain": [
              "리액트는 배울수록 아직 배울게 많다는 것을 느낍니다. 특히 최적화에 대한 이해도가 부족하다고 느껴 최적화에 대해 공부할 필요가 있다고 생각했습니다. 또한 프론트엔드 개발자에게 SEO도 정말 중요한데 다음 프로젝트 때는 최적화와 SEO 모두 신경 써서 작업해봐야겠다 생각했습니다."
            ]
          }
        ]
      }
    },
    {
      "id": 2,
      "img_url": "/public/images/projects/justmeatmain.png",
      "project_name": "JUSTMEAT 프로젝트",
      "activity_type": "JUST CODE 6기",
      "project_introduction": "육류 판매 전문 플랫폼 정육각을 참고해 모든 기능을 직접 구현",
      "github_url": "https://github.com/seyoung97/justcode-6-1st-justmeat-front",
      "distribute_url": "0",
      "blog_url": "https://velog.io/@seeyong_0/JUST-MEAT-1%EC%B0%A8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0%EB%A1%9D",
      "details": {
        "breif_info": {
          "introduction": "2주일 동안 정육각 페이지의 모든 기능을 직접 구현해보는 클론 프로젝트입니다.",
          "period": "2022/08/29 ~ 2022/09/09",
          "team": "Backend 2명, Frontend 3명"
        },
        "project_introduction": [
          "육류 판매 전문 인커머스 사이트인 정육각 페이지의 모든 기능을 직접 구현하는 프로젝트입니다.",
          "정육각 페이지는 기본에 충실한 구성을 갖고 있어 그동안 배운 내용을 복습하기에 좋은 사이트라고 생각해 선택했습니다."
        ],
        "links": [
          {
            "link_name": "프론트엔드 레포",
            "link_url": "https://github.com/seyoung97/justcode-6-1st-justmeat-front"
          },
          {
            "link_name": "백엔드 레포",
            "link_url": "https://github.com/wecode-bootcamp-korea/justcode-6-1st-justmeat-back"
          },
          {
            "link_name": "팀 노션",
            "link_url": "https://github.com/wecode-bootcamp-korea/justcode-6-1st-justmeat-back"
          },
          {
            "link_name": "회고록",
            "link_url": "https://velog.io/@seeyong_0/JUST-MEAT-1%EC%B0%A8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0%EB%A1%9D"
          }
        ],
        "video_url": "https://www.youtube.com/watch?v=IXRNaVJAwKQ&t=1s",
        "tech_stack": [
          {
            "position": "Front End",
            "skills": [
              "HTML",
              "Sass",
              "Javascript",
              "React",
              "CRA",
              "React-router",
              "axios",
              "Font Awesome"
            ]
          },
          {
            "position": "Back End",
            "skills": ["Node.js", "Express.js", "MYSQL"]
          },
          {
            "position": "Communication",
            "skills": ["Slack", "Notion", "Zep"]
          }
        ],
        "structure": {
          "img_url": [
            "/public/images/projects/structure/justmeat/header_footer.png",
            "/public/images/projects/structure/justmeat/cart.png",
            "/public/images/projects/structure/justmeat/carousel.png",
            "/public/images/projects/structure/justmeat/mypage.png"
          ],
          "explain": [
            "모든 컴포넌트들은 components 폴더 내에서 관리했고 components 폴더 하위에 기능별로 폴더들을 만들어서 파일들을 분류했습니다.",
            "페이지들은 pages 폴더 에서 관리했고 components들을 조립하여 하나의 페이지가 구성 될 수 있도록 했습니다.",
            "빨강색 글자로 적혀진 폴더는 본인이 담당했던 페이지들 입니다."
          ]
        },
        "cooperation": [
          {
            "title": "Planning Meeting: 주제선정, 범위설정, 역할 분담",
            "content": [
              "각자 2개 이상의 웹페이지를 찾아와서 소개한 후 투표를 통해 모두의 공방을 클론 페이지로 선정했습니다.",
              "함께 웹사이트를 둘러보면서 주요 기능과 사이트의 흐름을 파악했습니다.",
              "agile 방식을 도입해 계획 → 설계(디자인) → 개발(발전) → 테스트 → 검토(피드백)순으로 반복적으로 진행하며 프로젝트의 완성도를 높이기로 했습니다.",
              "이에따라 이커머스 사이트에 필수적인 회원가입/로그인, 상품리스트/상품상세 및 장바구니를 우선적으로 구현한 후 추가적인 기능을 계획하기로 했습니다."
            ]
          },
          {
            "title": "Daily Stand-Up meeting",
            "content": [
              "프로젝트 진행 기간동안 매일 오후 2시에 30분 내외로 스탠드업미팅을 진행했습니다.",
              "진행상황을 공유하고 공유해야할 이슈를 공유했습니다."
            ]
          }
        ],
        "Feature": [
          {
            "page_name": "메인 페이지",
            "page_gif": "/public/images/projects/features/justmeat/justmeat_carousel.gif",
            "features": [
              {
                "feature_name": "Carousel",
                "code_img": [
                  "/public/images/projects/features/modu/modu-dropdownmenu.png"
                ],
                "explain": [
                  "라이브러리를 사용하지 않고 JacaScript 함수로 로직을 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "장바구니 페이지",
            "page_gif": "/public/images/projects/features/justmeat/justmeat_cart.gif",
            "features": [
              {
                "feature_name": "수량 변경 및 수량 변경에 따른 표시 가격 변동 기능",
                "code_img": [
                  "/public/images/projects/features/justmeat/cart_amount.png"
                ],
                "explain": [
                  "Cart.js에서 선언한 함수를 CartList에서 적용하는데 어려움을 겪었습니다. 특히 카트리스트의 1번 품목의 수량 변경 버튼을 클릭했을때 1번 품목의 수량이 변경되고 2번을 클릭했을 때는 2번이 변경되도록 해야하는 점이 어려웠습니다.",
                  "이는 map 함수를 적용할 때 i(index) 인자를 추가해 버튼에 배열의 인덱스를 부여하여 특정하는 방식으로 해결할 수 있었습니다.",
                  "위의 방식으로 진행하기 위해 먼저 CartList 컴포넌트네 id라는 이름으로 i를 props로 전달했습니다. 그 다음 +/- 버튼에 각각 id를 전달하고 onClick 이벤트를 부여했습니다.",
                  "수량 변경 함수를 보면 onClick의 이벤트를 인자로 받고 있고 [e.target.id](http://e.target.id/) 로 버튼에 부여한 id 값을 불러오고 있습니다. 따라서 copy[e.target.id]로 클릭한 버튼이 3번 째 품목의 버튼이면 배열의 3번째 요소를 불러와 변경할 수 있습니다.",
                  "가격이 수량에 따라 변동될 수 있도록 제품 수량(productAmount) x 개당 가격(price) 라고 식을 작성했습니다."
                ]
              },
              {
                "feature_name": "'-'버튼 비활성화",
                "code_img": [
                  "/public/images/projects/features/justmeat/cart_button.png"
                ],
                "explain": [
                  "수량이 1보다 클 때 버튼이 활성화 되는 함수를 구현 한 뒤, !(부정연산자)를 활용해 함수의 반대상황일때 즉 1보다 적을 때 disabled되도록 구현했습니다."
                ]
              },
              {
                "feature_name": "리스트 삭제 기능",
                "code_img": [
                  "/public/images/projects/features/justmeat/cart_delete.png"
                ],
                "explain": [
                  "splice 메서드로 삭제하고자 하는 품목을 배열에서 제거했습니다.",
                  "추후에 학습하면서 copy를 하지 않고 filter 함수로 새로운 배열을 반환하는 방식이 더 효율적이라는 것을 알게 되었습니다. 리팩토링하여 가독성을 높일 예정입니다."
                ]
              },
              {
                "feature_name": "총가격 트랙킹",
                "code_img": [
                  "/public/images/projects/features/justmeat/cart_reduce.png"
                ],
                "explain": [
                  "reduce 메서드로 장바구니에 담긴 상품들의 총가격을 구하도록 구현했습니다."
                ]
              },
              {
                "feature_name": "장바구니 REST API통신",
                "code_img": [
                  "/public/images/projects/features/justmeat/cart_api.png"
                ],
                "explain": [
                  "axios를 사용해 백엔드와 통신했습니다.",
                  "장바구니에 담긴 정보를 받아올 때는 GET, 수량 및 가격을 변경할 때는 PATCH, 삭제를 요청할 때는 DELETE, 결제할 항목들을 보낼 때는 POST메서드를 사용했습니다.",
                  "로그인한 회원만 장바구니 내용을 확인 및 변경할 수 있도록 요청 URI에 로컬스토리지에 저장된 user의 id를 표현식으로 삽입했습니다.",
                  "또한 헤더에 인증인가를 추가하여 마찬가지로 로컬스토리지에 저장했던 토큰을 넣었습니다.",
                  "통신 에러를 정확히 파악하기 위해 try, catch 문을 활용했습니다."
                ]
              },
              {
                "feature_name": "장바구니 결제",
                "code_img": [
                  "/public/images/projects/features/justmeat/cart_pay.png"
                ],
                "explain": [
                  "팀원들과 결제 기능에 대해 논의할 때 실제로 결제를 하는 것은 어려울것 같아 대안으로 나온 방법이 포인트 결제 방법이었습니다.",
                  "포인트 결제 방법이란 회원이 보유한 가상의 포인트로 결제를하는 방법입니다. 회원가입을하면 회원에게 10만 포인트를 지급했고 결제시 포인트가 차감되도록 구현했습니다.",
                  "결제시 보유한 포인트보다 가격이 높으면 포인트 부족하다는 알림창이 뜨도록 했고 보유한 포인트보다 적게 구매하면 구매가 성공되었다는 알림창이 뜨도록 구현했습니다.",
                  "구매가 완료되면 백엔드에서 유저의 장바구니 테이블을 리셋시키고 프론트쪽에서 다시 GET요청을 보내 빈 장바구니를 출력하도록 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "마이 페이지",
            "page_gif": "/public/images/projects/features/justmeat/justmeat_mypage.gif",
            "features": [
              {
                "feature_name": "결제 내역 REST API 통신",
                "code_img": [
                  "/public/images/projects/features/justmeat/mypage.png"
                ],
                "explain": [
                  "GET 메서드로 결제내역 데이터를 받아왔습니다.",
                  "map함수를 사용하여 결제한 상품들을 리스트로 출력했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "로그아웃",
            "page_gif": "/public/images/projects/features/justmeat/justmeat_logout.gif",
            "features": [
              {
                "feature_name": "로그아웃 시 토큰 삭제하여 권한 제한",
                "code_img": [
                  "/public/images/projects/features/justmeat/logout.png"
                ],
                "explain": [
                  "localStorage.removeItem으로 저장됐던 토큰을 삭제했습니다.",
                  "삼항연산자와 useNavigate를 활용해 로칼스토리지에 토큰이 있을 시 장바구니 아이콘을 누르면 장바구니 페이지로 이동, 없을 시 로그인 페이지로 이동하도록했습니다.",
                  "삼항연산자를 활용해 토큰이 있을 시 헤더에 마이페이지를 출력, 없을 시 로그인/ 회원가입을 출력하도록 조건부 렌더링을 구현했습니다."
                ]
              }
            ]
          }
        ],
        "Trouble_Shooting": [
          {
            "title": "백엔드와 통신",
            "explain": [
              "처음으로 시도해보는 통신 + 백엔드에 대한 지식이 부족하다 보니 많은 에러들을 맞닥뜨렸는데 무슨 에러인지 조차 파악하기 어려워서 힘들었습니다."
            ],
            "subtitle": "문제 상황 파악",
            "figure_out": [
              "REST API로 통신하는 방법을 조사해야했습니다.",
              "또한 요청 URI에 유저의 아이디가 필요했으므로 동적인 URI작성 방법에 대해 알아야했습니다."
            ],
            "subtitle_2": "문제 해결 과정",
            "problem_solving": [
              "먼저 구글링 및 유튜브등 다양한 채널을 활용해 통신하는 방법에 대해 조사했습니다.",
              "조사를 통해 axios라는 라이브러리에 대해 알게 되었고 기존에 알던 fetch보다 간결하고 다양한 기능을 사용할 수 있어서 axios를 사용해봤습니다.",
              "try, catch문을 사용해 왜 발생하는 에러인지 보다 자세하게 확인할 수 있었습니다.",
              "동적인 uri의 경우 표현식 삽입방법으로 작성할 수 있다는 것을 알게되었습니다."
            ],
            "subtitle_3": "느낀점",
            "lesson": [
              "장바구니 기능이 다양한 통신을 필요로 해서 통신에 대해 많이 배울 수 있었습니다."
            ]
          }
        ],
        "Level_up": [
          "Git으로 협업하는 방법을 배울 수 있었습니다.",
          "map 함수로 구현한 ui에 인터렉티브 ui 적용하는 방법에 대해 배울 수 있었습니다.",
          "표현식 삽입 방법으로 동적라우팅을 구현할 수 있게 됐습니다.",
          "local storage를 활용하여 JWT 토큰을 저장하고 삭제하여 사용자 권한을 설정하는 방법에 대해 배웠습니다."
        ],
        "review": [
          {
            "sub_titile": "포기만 안하면 해결할 수 있다..!",
            "explain": [
              "첫 프로젝트인 만큼 시작할 때 막막한 마음이 컸습니다.",
              "예상했던 대로 레이아웃 짜는 방법부터 통신까지 모르는 것 투성이었지만 정답을 바로 알려줄 선생님은 없었습니다. 부트캠프는 절대 누군가 떠먹여주지 않기 때문에 스스로 부딪히고 해결해야한다는 것을 강렬하게 깨달았습니다.",
              "하루 종일 문제를 해결하기 위해 구글링만 한 날도 있고 구글링을 아무리 해도 해결이 되지 않을 때는 동료들에게 질문하기도하면서 치열하게 고민했습니다.",
              "포기하지만 않으면 결국 문제들이 해결되고 원하던 기능이 구현되는 것을 보면서 스스로가 조금은 대견했던것 같습니다.",
              "다음 프로젝트 때는 더 다양한 기능을 구현하면서 개발자로 성장하고싶습니다."
            ]
          }
        ]
      }
    }
  ],
  "internship_list": [
    {
      "id": 3,
      "img_url": "/public/images/projects/lululabmain.png",
      "project_name": "lululab 병원 예약 서비스",
      "activity_type": "wanted pre-onboarding",
      "project_introduction": "기업 룰루랩에서 제공한 기획안을 토대로 UI/UX 디자인 및 병원 예약, 예약 조회 기능을 구현",
      "github_url": "https://github.com/seyoung97/preonboarding-lululab",
      "distribute_url": "https://extraordinary-elf-828716.netlify.app",
      "blog_url": "0",
      "details": {
        "breif_info": {
          "introduction": "기업 룰루랩에서 제공한 기획안을 토대로 UI/UX 디자인 및 병원 예약, 예약 조회 기능을 구현했습니다.",
          "period": "2022/10/17 ~ 2022/10/20",
          "team": "개인 프로젝트"
        },
        "project_introduction": [
          "룰루랩은 피부 분석 인공지능 기술을 중심으로 피부 관리 서비스를 제공하는 회사입니다.",
          "예약이 가능한 시간을 보여주고 선택할 수 있는 예약가능 시간 리스트 페이지, 예약자 정보를 입력하고 저장할 수 있는 예약자 정보 입력 페이지 그리고 전화번호로 예약 여부를 확인할 수 있는 예약 조회 페이지로 구성되어있습니다.",
          "가산점이 부여되는 추가 구현 사항이었던 no-show 방지 기능도 구현했습니다. no-show한 적이 있는 고객인 경우 온라인 예약을 못하도록 제한했습니다."
        ],
        "links": [
          {
            "link_name": "프론트엔드 레포",
            "link_url": "https://github.com/seyoung97/preonboarding-lululab"
          },
          {
            "link_name": "배포 링크",
            "link_url": "https://extraordinary-elf-828716.netlify.app"
          }
        ],
        "video_url": "https://www.youtube.com/watch?v=0NputbNx3_s",
        "tech_stack": [
          {
            "position": "Front End",
            "skills": [
              "HTML",
              "styled-component",
              "Javascript",
              "React",
              "Vite",
              "React-router",
              "axios",
              "Font Awesome"
            ]
          }
        ],
        "structure": {
          "img_url": [
            "/public/images/projects/structure/lululab/lululab_public.png",
            "/public/images/projects/structure/lululab/lululab_reservationlist.png",
            "/public/images/projects/structure/lululab/lululab_pages.png"
          ],
          "explain": [
            "요일별 예약가능 시간을 정리한 데이터와 예약고객 데이터는 통신으로 받아왔기 때문에 public에 저장했습니다.",
            "모든 컴포넌트들은 components 폴더 내에서 관리했고 components 폴더 하위에 기능별로 폴더들을 만들어서 파일들을 분류했습니다.",
            "페이지들은 pages 폴더 에서 관리했고 components들을 조립하여 하나의 페이지가 구성 될 수 있도록 했습니다."
          ]
        },
        "cooperation": [
          {
            "title": "Planning Meeting 1: 주제선정,범위설정",
            "content": [
              "각자 2개 이상의 웹페이지를 찾아와서 소개하는 시간을 가졌습니다.",
              "투표를 통해 모두의 공방을 클론 페이지로 선정했습니다. 일반적인 이커머스가 아닌 맞춤 제작이라는 점에서 다양한 옵션 선택 기능이나 필터링 기능을 구현해볼 수 있는 기회라고 생각해서 선택했습니다.",
              "함께 웹사이트를 둘러보면서 주요 기능과 사이트의 흐름을 파악했습니다.",
              "시간 제약이 있는 만큼 구현할 기능과 제외할 기능들을 명확하게 나눴습니다. 저희는 우선 디자인 마켓의 주요 기능들을 구현한 후 시간이 있다면 맞춤제작소의 채팅 기능까지 구현하는 것을 목표로 설정했습니다."
            ]
          },
          {
            "title": "Planning Meeting 2: 역할 분담, 컨벤션",
            "content": [
              "각자 원하는 기능을 소개하고 겹치는 부분이 있으면 조율하면서 역할을 분담했습니다.",
              "코드 컨벤션과 Git 컨벤션을 정리했습니다. ",
              "Git 컨벤션의 경우 Header, body, Footer 구조로 작성했습니다."
            ]
          },
          {
            "title": "Planning Meeting 3: 새로운 기획 회의",
            "content": [
              "클론 페이지인 모두의 공방이 리뉴얼에 들어가서 UI가 제대로 보이지 않는 문제가 발생되어 이를 해결하기 위해 3번 째 플래닝 미팅을 갖게 되었습니다.",
              "모두의 공방 측에 문의해본 결과 리뉴얼 기간이 2~3개월 정도 될것이라는 답변을 받았고 기다리고만 있을 수 없다는 판단을 내렸습니다. 이미 어느정도 프로젝트가 진행된 상황이었기 때문에 다른 사이트를 찾는 것 보다 저희가 직접 기획 및 디자인을하여 우리들만의 사이트를 만들기로 했습니다.",
              "비슷한 형태의 웹사이트인 오늘의 집, 무신사 등 웹사이트들의 UI를 같이 분석하고 차용하면 괜찮을 부분들을 참고해 제작했습니다. 핀터레스트에서 웹페이지 디자인을 검색해 참고하는 것도 많은 도움이 되었습니다.",
              "리뉴얼 이슈가 발생하여 시간이 부족할 것 같다는 판단을 내렸고 맞춤 제작소 부분은 과감히 제외시켰습니다. 대신에 제작자 페이지를 만들어서 팀원들의 프로필을 넣어 우리만의 공방 페이지를 만들었습니다.",
              "팀원들에게 UI 피드백을 수시로 받으며 직관적인 UI를 구현하기 위해 노력했습니다."
            ]
          },
          {
            "title": "Daily Stand-Up meeting",
            "content": [
              "프로젝트 진행 기간동안 매일 오후 2시에 30분 내외로 스탠드업미팅을 진행했습니다.",
              "진행상황을 공유하고 공유해야할 이슈를 공유했습니다."
            ]
          },
          {
            "title": "GIT Flow 방식",
            "content": [
              "개발 사항을 main 브랜치에 병합하지 않고 develop 브랜치에 병합하고 마지막에 main branch에 병합했습니다.",
              "새로운 UI 또는 기능을 구현할 때 또는 발견된 버그를 처리할 때 마다 Issue를 등록해 팀원들의 진행상황을 tracking 할 수 있도록했습니다.",
              "Issue를 등록할 때 태그를 적극적으로 활용했고 작업 내용을 구체적으로 작성했습니다.",
              "commit을 남길 때 헤더-바디-푸터 구조로 작성하여 작업 내용을 세세하게 기록할 수 있도록 했습니다. 푸터에 Issue 번호를 적어서 어떤 Issue에 속한 작업인지 기록했습니다.",
              "PR은 하나의 Issue가 완료 될 때 마다 올렸습니다. PR이 Issue와 연동되도록했습니다."
            ]
          }
        ],
        "Feature": [
          {
            "page_name": "예약 시간 선택 페이지",
            "page_gif": "/public/images/projects/features/lululab/reservation_list.gif",
            "features": [
              {
                "feature_name": "Drop down menu",
                "code_img": [
                  "/public/images/projects/features/modu/modu-dropdownmenu.png"
                ],
                "explain": [
                  "조건부 함수와 MouseEnter 이벤트를 활용해 드롭다운 메뉴를 구현했습니다."
                ]
              },
              {
                "feature_name": "Carousel 베너 광고",
                "code_img": [
                  "/public/images/projects/features/modu/modu-carousel.png"
                ],
                "explain": [
                  "swiper 라이브러리를 사용해 베너 광고 부분을 carousel로 구현했습니다.",
                  "참고 사이트가 리뉴얼에 들어가서 참고할 이미지가 없었습니다. 핀터레스트에 베너 광고 이미지들을 검색해서 디자인을 참고하여 직접 제작했습니다."
                ]
              },
              {
                "feature_name": "신상품 및 인기상품 리스트 ",
                "code_img": [
                  "/public/images/projects/features/modu/modu-mainpagelist.png"
                ],
                "explain": [
                  "신상품과 인기상품 리스트부분은 라이브러리를 따로 사용하지 않고 JavaScript로 직접 슬라이드 기능을 구현했습니다.",
                  "아이템카드 컴포넌트를 재사용하여 리스트를 구현했습니다.",
                  "표현식과 useParams를 활용해 상품을 클릭했을 때 해당 상품의 상세페이지로 넘어갈 수 있도록 동적라우팅을 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "예약자 정보 입력 페이지",
            "page_gif": "/public/images/projects/features/lululab/reservation_form.gif",
            "features": [
              {
                "feature_name": "정렬 기능",
                "code_img": [
                  "/public/images/projects/features/modu/modu-ordering.png"
                ],
                "explain": [
                  "백엔드와 통신하여 추천순, 판매량순, 낮은 가격순 , 높은 가격 순 정렬기능을 구현했습니다.",
                  "정렬조건이 바뀔 때 마다 state값이 변경 되도록 하고 이 state 값을 통신 요청 URI에 표현식으로 넣어서",
                  "state 값이 변경 되면 요청 URI가 변경되어 조건에 맞는 정렬 순서대로 데이터를 받아와 출력하도록 구현했습니다."
                ]
              },
              {
                "feature_name": "무한스크롤 기능",
                "code_img": [
                  "/public/images/projects/features/modu/modu-infinitescroll.png"
                ],
                "explain": [
                  "windows의 scroll height 와 scroll event를 활용하여 무한스크롤 기능을 구현했습니다.",
                  "스크롤이 끝에 닿을 때 마다 offset이라는 state를 1씩 증가되게 하고 이 offset을 요청 URI에 표현식으로 넣어서 계속해서 추가로 데이터를 요청하도록 구현했습니다.",
                  "하지만 데이터의 양이 한정적이어서 실제로는 한번 밖에 상품 리스트가 추가되지 않아 이 부분이 아쉬웠습니다.",
                  "useEffect의 의존성 배열과 표현식, return함수를 활용해 정렬기능이 적용된 상태에서 무한스크롤이 작동할 수 있도록 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "예약 조회 페이지",
            "page_gif": "/public/images/projects/features/lululab/reservation_inquiry.gif",
            "features": [
              {
                "feature_name": "장바구니 수량변경, 삭제 기능 구현",
                "code_img": [
                  "/public/images/projects/features/modu/modu-cart.png"
                ],
                "explain": [
                  "버튼에 value값을 부여해 해당 아이템의 수량/가격만 변동및 삭제되도록 구현했습니다.",
                  "map함수와 reduce함수를 사용해 제품가격, 총배송비, 총결제가격을 표시하고 변동을 트래킹할 수 있도록 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "no-show 방지",
            "page_gif": "/public/images/projects/features/lululab/noshow.gif",
            "features": [
              {
                "feature_name": "팀원 프로필 카드 제작",
                "code_img": [
                  "/public/images/projects/features/modu/modu-developers.png"
                ],
                "explain": [
                  "팀원들의 아바타를 아이폰 이모지 기능을 활용해 직접 제작했습니다.",
                  "새로운 파일을 생성하지 않고 itemCard 컴포넌트를 재사용하여 구현했습니다."
                ]
              }
            ]
          }
        ],
        "Trouble_Shooting": [
          {
            "title": "클론 페이지 리뉴얼 이슈",
            "explain": [
              "프로젝트를 시작하고 얼마 지나지 않아 모두의 공방 페이지가 리뉴얼에 들어가서 UI 및 기능들이 보이지 않았습니다.",
              "프론트 개발자에게는 눈을 감고 개발을 하라는 격이었기 때문에 상당히 당황스러웠습니다."
            ],
            "subtitle": "문제 상황 파악",
            "figure_out": [
              "먼저 모두의 공방 고객센터에 전화해 상황을 파악했습니다. 대대적으로 리뉴얼에 들어갔기 때문에 2개월 정도 소요된다는 답변을 받았고 기다리고만 있을 수 없다는 판단을 내렸습니다.",
              "결국 저희만의 사이트를 만들기로 결정했고 팀원들과 자주 소통하며 디자인 부터 기능까지 저희가 직접 기획하고 구현했습니다."
            ],
            "subtitle_2": "문제 해결 과정",
            "problem_solving": [
              "저희는 먼저 구현할 기능들을 명확하게  정했습니다. 마이페이지의 경우 user의 정보와 구매 목록 및 찜 목록을 출력하고 구매 목록에서 ‘리뷰 작성하기’ 버튼을 누르면 해당 상품의 리뷰를 작성할 수 있도록 리뷰작성 페이지로 넘어가도록 하는 목표를 세웠습니다.",
              "그리고 목표와 유사한 웹페이지가 있는지 조사를 했습니다. 그 결과 무신사의 마이페이지가 저희가 기획한 바와 유사하게 구성이 되어있었습니다. 이에 무신사의 마이페이지를 참고하여 제작하기로 결정했습니다.",
              "장바구니 페이지의 경우 수량 변경 및 삭제 그리고 배송비와 전체 가격을 따로 계산하는 것을 목표로 했습니다.",
              "참고할 사이트를 조사하다가 오늘의 집의 장바구니 페이지가 저희 프로젝트와 디자인 무드도 잘 맞고 배송비 및 전체 가격 표시 되는 부분이 깔끔해서 오늘의 집을 참고하여 제작하기로 결정했습니다. "
            ],
            "subtitle_3": "느낀점",
            "lesson": [
              "처음에는 당황스러웠지만 직접 기획을하면서 사용자의 입장에서 서비스를 구축해볼 수 있는 좋은 기회였습니다. "
            ]
          }
        ],
        "Level_up": [
          "Git flow 방식으로 협업하는 방법을 배울 수 있었습니다.",
          "component 재사용의 편리성에 대해 느낄 수 있었습니다",
          "useEffect의 dependency array를 활용한 동적라우팅",
          "백엔드와 소통하여 offset & limit을 설정, 무한 스크롤 구현",
          "windows height를 활용하여 무한스크롤 구현"
        ],
        "review": [
          {
            "sub_titile": "클린코드의 중요성",
            "explain": [
              "그동안에는 구현에 집중하느라 클린 코딩의 중요성에 대해 생각할 겨를이 없었는데 이번 프로젝트는 팀원들의 코드들도 뜯어보면서 많이 배울 수 있었습니다. 특히 API 파일을 따로 관리해 임포트해서 쓰는 방식을 보고 다음 프로젝트 때 적용해봐야겠다 생각했습니다."
            ]
          },
          {
            "sub_titile": "최적화에 대하여...",
            "explain": [
              "리액트는 배울수록 아직 배울게 많다는 것을 느낍니다. 특히 최적화에 대한 이해도가 부족하다고 느껴 최적화에 대해 공부할 필요가 있다고 생각했습니다. 또한 프론트엔드 개발자에게 SEO도 정말 중요한데 다음 프로젝트 때는 최적화와 SEO 모두 신경 써서 작업해봐야겠다 생각했습니다."
            ]
          }
        ]
      }
    },
    {
      "id": 4,
      "img_url": "/public/images/projects/haiimain.png",
      "project_name": "HAII 음성 녹음 애플리케이션",
      "activity_type": "wanted pre-onboarding",
      "project_introduction": "기업 하이에서 제공한 기획안을 토대로 UI/UX 디자인 및 음성 녹음, 녹음 파일 재생, 파형 출력 기능을 구현",
      "github_url": "https://github.com/seyoung97/pre-onboarding-4team-haii",
      "distribute_url": "https://jocular-empanada-50806c.netlify.app/",
      "blog_url": "0",
      "details": {
        "breif_info": {
          "introduction": "2주일 동안 모두의공방 페이지의 모든 기능을 직접 구현해보는 클론 프로젝트입니다.",
          "period": "2022/09/19 ~ 2022/09/30",
          "team": "Backend 2명, Frontend 3명"
        },
        "project_introduction": [
          "모두의 공방은 원하는 공방을 쉽고 빠르게 찾을 수 있는 맞춤 제작 전문 플랫폼입니다.",
          "모두의 공방에서 제공하는 주요 기능은 맞춤 제작을 문의할 수 있는 맞춤 제작소와 이미 만들어진 제품을 옵션에 따라 구매할 수 있는 디자인마켓으로 이루어져있습니다.",
          "저희는 디자인마켓의 다양한 옵션 선택 기능과 필터링 기능을 구현해보고 싶어서 모두의 공방을 선택했습니다."
        ],
        "links": [
          {
            "link_name": "프론트엔드 레포",
            "link_url": "https://github.com/wecode-bootcamp-korea/justcode-6-2nd-team4-front"
          },
          {
            "link_name": "백엔드 레포",
            "link_url": "https://github.com/wecode-bootcamp-korea/justcode-6-2nd-team4-back"
          },
          {
            "link_name": "팀 노션",
            "link_url": "https://www.notion.so/wecode/4-7769dc42856248299aa5d32009b313e9"
          },
          {
            "link_name": "회고록",
            "link_url": "https://velog.io/@seeyong_0/%EC%82%AC%EC%A1%B0%EC%9D%98-%EA%B3%B5%EB%B0%A9Justcode-2%EC%B0%A8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0%EB%A1%9D"
          }
        ],
        "video_url": "https://www.youtube.com/watch?v=0NputbNx3_s",
        "tech_stack": [
          {
            "position": "Front End",
            "skills": [
              "HTML",
              "Sass",
              "Javascript",
              "React",
              "CRA",
              "React-router",
              "axios",
              "Font Awesome"
            ]
          },
          {
            "position": "Back End",
            "skills": ["Node.js", "Express.js", "MYSQL"]
          },
          {
            "position": "Communication",
            "skills": ["Slack", "Notion", "Zep"]
          }
        ],
        "structure": {
          "img_url": [
            "/public/images/projects/structure/modu/cart_structure.png",
            "/public/images/projects/structure/modu/itemcard_structure.png",
            "/public/images/projects/structure/modu/navigationbar_structure.png",
            "/public/images/projects/structure/modu/modu_pages.png"
          ],
          "explain": [
            "모든 컴포넌트들은 components 폴더 내에서 관리했고 components 폴더 하위에 기능별로 폴더들을 만들어서 파일들을 분류했습니다.",
            "페이지들은 pages 폴더 에서 관리했고 components들을 조립하여 하나의 페이지가 구성 될 수 있도록 했습니다.",
            "빨강색 글자로 적혀진 폴더는 본인이 담당했던 페이지들 입니다."
          ]
        },
        "cooperation": [
          {
            "title": "Planning Meeting 1: 주제선정,범위설정",
            "content": [
              "각자 2개 이상의 웹페이지를 찾아와서 소개하는 시간을 가졌습니다.",
              "투표를 통해 모두의 공방을 클론 페이지로 선정했습니다. 일반적인 이커머스가 아닌 맞춤 제작이라는 점에서 다양한 옵션 선택 기능이나 필터링 기능을 구현해볼 수 있는 기회라고 생각해서 선택했습니다.",
              "함께 웹사이트를 둘러보면서 주요 기능과 사이트의 흐름을 파악했습니다.",
              "시간 제약이 있는 만큼 구현할 기능과 제외할 기능들을 명확하게 나눴습니다. 저희는 우선 디자인 마켓의 주요 기능들을 구현한 후 시간이 있다면 맞춤제작소의 채팅 기능까지 구현하는 것을 목표로 설정했습니다."
            ]
          },
          {
            "title": "Planning Meeting 2: 역할 분담, 컨벤션",
            "content": [
              "각자 원하는 기능을 소개하고 겹치는 부분이 있으면 조율하면서 역할을 분담했습니다.",
              "코드 컨벤션과 Git 컨벤션을 정리했습니다. ",
              "Git 컨벤션의 경우 Header, body, Footer 구조로 작성했습니다."
            ]
          },
          {
            "title": "Planning Meeting 3: 새로운 기획 회의",
            "content": [
              "클론 페이지인 모두의 공방이 리뉴얼에 들어가서 UI가 제대로 보이지 않는 문제가 발생되어 이를 해결하기 위해 3번 째 플래닝 미팅을 갖게 되었습니다.",
              "모두의 공방 측에 문의해본 결과 리뉴얼 기간이 2~3개월 정도 될것이라는 답변을 받았고 기다리고만 있을 수 없다는 판단을 내렸습니다. 이미 어느정도 프로젝트가 진행된 상황이었기 때문에 다른 사이트를 찾는 것 보다 저희가 직접 기획 및 디자인을하여 우리들만의 사이트를 만들기로 했습니다.",
              "비슷한 형태의 웹사이트인 오늘의 집, 무신사 등 웹사이트들의 UI를 같이 분석하고 차용하면 괜찮을 부분들을 참고해 제작했습니다. 핀터레스트에서 웹페이지 디자인을 검색해 참고하는 것도 많은 도움이 되었습니다.",
              "리뉴얼 이슈가 발생하여 시간이 부족할 것 같다는 판단을 내렸고 맞춤 제작소 부분은 과감히 제외시켰습니다. 대신에 제작자 페이지를 만들어서 팀원들의 프로필을 넣어 우리만의 공방 페이지를 만들었습니다.",
              "팀원들에게 UI 피드백을 수시로 받으며 직관적인 UI를 구현하기 위해 노력했습니다."
            ]
          },
          {
            "title": "Daily Stand-Up meeting",
            "content": [
              "프로젝트 진행 기간동안 매일 오후 2시에 30분 내외로 스탠드업미팅을 진행했습니다.",
              "진행상황을 공유하고 공유해야할 이슈를 공유했습니다."
            ]
          },
          {
            "title": "GIT Flow 방식",
            "content": [
              "개발 사항을 main 브랜치에 병합하지 않고 develop 브랜치에 병합하고 마지막에 main branch에 병합했습니다.",
              "새로운 UI 또는 기능을 구현할 때 또는 발견된 버그를 처리할 때 마다 Issue를 등록해 팀원들의 진행상황을 tracking 할 수 있도록했습니다.",
              "Issue를 등록할 때 태그를 적극적으로 활용했고 작업 내용을 구체적으로 작성했습니다.",
              "commit을 남길 때 헤더-바디-푸터 구조로 작성하여 작업 내용을 세세하게 기록할 수 있도록 했습니다. 푸터에 Issue 번호를 적어서 어떤 Issue에 속한 작업인지 기록했습니다.",
              "PR은 하나의 Issue가 완료 될 때 마다 올렸습니다. PR이 Issue와 연동되도록했습니다."
            ]
          }
        ],
        "Feature": [
          {
            "page_name": "메인 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-mainpage.gif",
            "features": [
              {
                "feature_name": "Drop down menu",
                "code_img": [
                  "/public/images/projects/features/modu/modu-dropdownmenu.png"
                ],
                "explain": [
                  "조건부 함수와 MouseEnter 이벤트를 활용해 드롭다운 메뉴를 구현했습니다."
                ]
              },
              {
                "feature_name": "Carousel 베너 광고",
                "code_img": [
                  "/public/images/projects/features/modu/modu-carousel.png"
                ],
                "explain": [
                  "swiper 라이브러리를 사용해 베너 광고 부분을 carousel로 구현했습니다.",
                  "참고 사이트가 리뉴얼에 들어가서 참고할 이미지가 없었습니다. 핀터레스트에 베너 광고 이미지들을 검색해서 디자인을 참고하여 직접 제작했습니다."
                ]
              },
              {
                "feature_name": "신상품 및 인기상품 리스트 ",
                "code_img": [
                  "/public/images/projects/features/modu/modu-mainpagelist.png"
                ],
                "explain": [
                  "신상품과 인기상품 리스트부분은 라이브러리를 따로 사용하지 않고 JavaScript로 직접 슬라이드 기능을 구현했습니다.",
                  "아이템카드 컴포넌트를 재사용하여 리스트를 구현했습니다.",
                  "표현식과 useParams를 활용해 상품을 클릭했을 때 해당 상품의 상세페이지로 넘어갈 수 있도록 동적라우팅을 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "상품 리스트 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-category.gif",
            "features": [
              {
                "feature_name": "정렬 기능",
                "code_img": [
                  "/public/images/projects/features/modu/modu-ordering.png"
                ],
                "explain": [
                  "백엔드와 통신하여 추천순, 판매량순, 낮은 가격순 , 높은 가격 순 정렬기능을 구현했습니다.",
                  "정렬조건이 바뀔 때 마다 state값이 변경 되도록 하고 이 state 값을 통신 요청 URI에 표현식으로 넣어서",
                  "state 값이 변경 되면 요청 URI가 변경되어 조건에 맞는 정렬 순서대로 데이터를 받아와 출력하도록 구현했습니다."
                ]
              },
              {
                "feature_name": "무한스크롤 기능",
                "code_img": [
                  "/public/images/projects/features/modu/modu-infinitescroll.png"
                ],
                "explain": [
                  "windows의 scroll height 와 scroll event를 활용하여 무한스크롤 기능을 구현했습니다.",
                  "스크롤이 끝에 닿을 때 마다 offset이라는 state를 1씩 증가되게 하고 이 offset을 요청 URI에 표현식으로 넣어서 계속해서 추가로 데이터를 요청하도록 구현했습니다.",
                  "하지만 데이터의 양이 한정적이어서 실제로는 한번 밖에 상품 리스트가 추가되지 않아 이 부분이 아쉬웠습니다.",
                  "useEffect의 의존성 배열과 표현식, return함수를 활용해 정렬기능이 적용된 상태에서 무한스크롤이 작동할 수 있도록 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "장바구니 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-cart.gif",
            "features": [
              {
                "feature_name": "장바구니 수량변경, 삭제 기능 구현",
                "code_img": [
                  "/public/images/projects/features/modu/modu-cart.png"
                ],
                "explain": [
                  "버튼에 value값을 부여해 해당 아이템의 수량/가격만 변동및 삭제되도록 구현했습니다.",
                  "map함수와 reduce함수를 사용해 제품가격, 총배송비, 총결제가격을 표시하고 변동을 트래킹할 수 있도록 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "제작자 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-developer.gif",
            "features": [
              {
                "feature_name": "팀원 프로필 카드 제작",
                "code_img": [
                  "/public/images/projects/features/modu/modu-developers.png"
                ],
                "explain": [
                  "팀원들의 아바타를 아이폰 이모지 기능을 활용해 직접 제작했습니다.",
                  "새로운 파일을 생성하지 않고 itemCard 컴포넌트를 재사용하여 구현했습니다."
                ]
              }
            ]
          }
        ],
        "Trouble_Shooting": [
          {
            "title": "클론 페이지 리뉴얼 이슈",
            "explain": [
              "프로젝트를 시작하고 얼마 지나지 않아 모두의 공방 페이지가 리뉴얼에 들어가서 UI 및 기능들이 보이지 않았습니다.",
              "프론트 개발자에게는 눈을 감고 개발을 하라는 격이었기 때문에 상당히 당황스러웠습니다."
            ],
            "subtitle": "문제 상황 파악",
            "figure_out": [
              "먼저 모두의 공방 고객센터에 전화해 상황을 파악했습니다. 대대적으로 리뉴얼에 들어갔기 때문에 2개월 정도 소요된다는 답변을 받았고 기다리고만 있을 수 없다는 판단을 내렸습니다.",
              "결국 저희만의 사이트를 만들기로 결정했고 팀원들과 자주 소통하며 디자인 부터 기능까지 저희가 직접 기획하고 구현했습니다."
            ],
            "subtitle_2": "문제 해결 과정",
            "problem_solving": [
              "저희는 먼저 구현할 기능들을 명확하게  정했습니다. 마이페이지의 경우 user의 정보와 구매 목록 및 찜 목록을 출력하고 구매 목록에서 ‘리뷰 작성하기’ 버튼을 누르면 해당 상품의 리뷰를 작성할 수 있도록 리뷰작성 페이지로 넘어가도록 하는 목표를 세웠습니다.",
              "그리고 목표와 유사한 웹페이지가 있는지 조사를 했습니다. 그 결과 무신사의 마이페이지가 저희가 기획한 바와 유사하게 구성이 되어있었습니다. 이에 무신사의 마이페이지를 참고하여 제작하기로 결정했습니다.",
              "장바구니 페이지의 경우 수량 변경 및 삭제 그리고 배송비와 전체 가격을 따로 계산하는 것을 목표로 했습니다.",
              "참고할 사이트를 조사하다가 오늘의 집의 장바구니 페이지가 저희 프로젝트와 디자인 무드도 잘 맞고 배송비 및 전체 가격 표시 되는 부분이 깔끔해서 오늘의 집을 참고하여 제작하기로 결정했습니다. "
            ],
            "subtitle_3": "느낀점",
            "lesson": [
              "처음에는 당황스러웠지만 직접 기획을하면서 사용자의 입장에서 서비스를 구축해볼 수 있는 좋은 기회였습니다. "
            ]
          }
        ],
        "Level_up": [
          "Git flow 방식으로 협업하는 방법을 배울 수 있었습니다.",
          "component 재사용의 편리성에 대해 느낄 수 있었습니다",
          "useEffect의 dependency array를 활용한 동적라우팅",
          "백엔드와 소통하여 offset & limit을 설정, 무한 스크롤 구현",
          "windows height를 활용하여 무한스크롤 구현"
        ],
        "review": [
          {
            "sub_titile": "클린코드의 중요성",
            "explain": [
              "그동안에는 구현에 집중하느라 클린 코딩의 중요성에 대해 생각할 겨를이 없었는데 이번 프로젝트는 팀원들의 코드들도 뜯어보면서 많이 배울 수 있었습니다. 특히 API 파일을 따로 관리해 임포트해서 쓰는 방식을 보고 다음 프로젝트 때 적용해봐야겠다 생각했습니다."
            ]
          },
          {
            "sub_titile": "최적화에 대하여...",
            "explain": [
              "리액트는 배울수록 아직 배울게 많다는 것을 느낍니다. 특히 최적화에 대한 이해도가 부족하다고 느껴 최적화에 대해 공부할 필요가 있다고 생각했습니다. 또한 프론트엔드 개발자에게 SEO도 정말 중요한데 다음 프로젝트 때는 최적화와 SEO 모두 신경 써서 작업해봐야겠다 생각했습니다."
            ]
          }
        ]
      }
    },
    {
      "id": 5,
      "img_url": "/public/images/projects/playmain.png",
      "project_name": "BITBYTE 플레이키보드 웹스토어",
      "activity_type": "wanted pre-onboarding",
      "project_introduction": "기업 비트바이트에서 제공한 기획안 및 figma를 토대로 상품 리스트 페이지 및 상품 상세 페이지를 구현",
      "github_url": "https://github.com/seyoung97/playkeyboard",
      "distribute_url": "https://elaborate-hotteok-6003a1.netlify.app",
      "blog_url": "0",
      "details": {
        "breif_info": {
          "introduction": "2주일 동안 모두의공방 페이지의 모든 기능을 직접 구현해보는 클론 프로젝트입니다.",
          "period": "2022/09/19 ~ 2022/09/30",
          "team": "Backend 2명, Frontend 3명"
        },
        "project_introduction": [
          "모두의 공방은 원하는 공방을 쉽고 빠르게 찾을 수 있는 맞춤 제작 전문 플랫폼입니다.",
          "모두의 공방에서 제공하는 주요 기능은 맞춤 제작을 문의할 수 있는 맞춤 제작소와 이미 만들어진 제품을 옵션에 따라 구매할 수 있는 디자인마켓으로 이루어져있습니다.",
          "저희는 디자인마켓의 다양한 옵션 선택 기능과 필터링 기능을 구현해보고 싶어서 모두의 공방을 선택했습니다."
        ],
        "links": [
          {
            "link_name": "프론트엔드 레포",
            "link_url": "https://github.com/wecode-bootcamp-korea/justcode-6-2nd-team4-front"
          },
          {
            "link_name": "백엔드 레포",
            "link_url": "https://github.com/wecode-bootcamp-korea/justcode-6-2nd-team4-back"
          },
          {
            "link_name": "팀 노션",
            "link_url": "https://www.notion.so/wecode/4-7769dc42856248299aa5d32009b313e9"
          },
          {
            "link_name": "회고록",
            "link_url": "https://velog.io/@seeyong_0/%EC%82%AC%EC%A1%B0%EC%9D%98-%EA%B3%B5%EB%B0%A9Justcode-2%EC%B0%A8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9A%8C%EA%B3%A0%EB%A1%9D"
          }
        ],
        "video_url": "https://www.youtube.com/watch?v=0NputbNx3_s",
        "tech_stack": [
          {
            "position": "Front End",
            "skills": [
              "HTML",
              "Sass",
              "Javascript",
              "React",
              "CRA",
              "React-router",
              "axios",
              "Font Awesome"
            ]
          },
          {
            "position": "Back End",
            "skills": ["Node.js", "Express.js", "MYSQL"]
          },
          {
            "position": "Communication",
            "skills": ["Slack", "Notion", "Zep"]
          }
        ],
        "structure": {
          "img_url": [
            "/public/images/projects/structure/modu/cart_structure.png",
            "/public/images/projects/structure/modu/itemcard_structure.png",
            "/public/images/projects/structure/modu/navigationbar_structure.png",
            "/public/images/projects/structure/modu/modu_pages.png"
          ],
          "explain": [
            "모든 컴포넌트들은 components 폴더 내에서 관리했고 components 폴더 하위에 기능별로 폴더들을 만들어서 파일들을 분류했습니다.",
            "페이지들은 pages 폴더 에서 관리했고 components들을 조립하여 하나의 페이지가 구성 될 수 있도록 했습니다.",
            "빨강색 글자로 적혀진 폴더는 본인이 담당했던 페이지들 입니다."
          ]
        },
        "cooperation": [
          {
            "title": "Planning Meeting 1: 주제선정,범위설정",
            "content": [
              "각자 2개 이상의 웹페이지를 찾아와서 소개하는 시간을 가졌습니다.",
              "투표를 통해 모두의 공방을 클론 페이지로 선정했습니다. 일반적인 이커머스가 아닌 맞춤 제작이라는 점에서 다양한 옵션 선택 기능이나 필터링 기능을 구현해볼 수 있는 기회라고 생각해서 선택했습니다.",
              "함께 웹사이트를 둘러보면서 주요 기능과 사이트의 흐름을 파악했습니다.",
              "시간 제약이 있는 만큼 구현할 기능과 제외할 기능들을 명확하게 나눴습니다. 저희는 우선 디자인 마켓의 주요 기능들을 구현한 후 시간이 있다면 맞춤제작소의 채팅 기능까지 구현하는 것을 목표로 설정했습니다."
            ]
          },
          {
            "title": "Planning Meeting 2: 역할 분담, 컨벤션",
            "content": [
              "각자 원하는 기능을 소개하고 겹치는 부분이 있으면 조율하면서 역할을 분담했습니다.",
              "코드 컨벤션과 Git 컨벤션을 정리했습니다. ",
              "Git 컨벤션의 경우 Header, body, Footer 구조로 작성했습니다."
            ]
          },
          {
            "title": "Planning Meeting 3: 새로운 기획 회의",
            "content": [
              "클론 페이지인 모두의 공방이 리뉴얼에 들어가서 UI가 제대로 보이지 않는 문제가 발생되어 이를 해결하기 위해 3번 째 플래닝 미팅을 갖게 되었습니다.",
              "모두의 공방 측에 문의해본 결과 리뉴얼 기간이 2~3개월 정도 될것이라는 답변을 받았고 기다리고만 있을 수 없다는 판단을 내렸습니다. 이미 어느정도 프로젝트가 진행된 상황이었기 때문에 다른 사이트를 찾는 것 보다 저희가 직접 기획 및 디자인을하여 우리들만의 사이트를 만들기로 했습니다.",
              "비슷한 형태의 웹사이트인 오늘의 집, 무신사 등 웹사이트들의 UI를 같이 분석하고 차용하면 괜찮을 부분들을 참고해 제작했습니다. 핀터레스트에서 웹페이지 디자인을 검색해 참고하는 것도 많은 도움이 되었습니다.",
              "리뉴얼 이슈가 발생하여 시간이 부족할 것 같다는 판단을 내렸고 맞춤 제작소 부분은 과감히 제외시켰습니다. 대신에 제작자 페이지를 만들어서 팀원들의 프로필을 넣어 우리만의 공방 페이지를 만들었습니다.",
              "팀원들에게 UI 피드백을 수시로 받으며 직관적인 UI를 구현하기 위해 노력했습니다."
            ]
          },
          {
            "title": "Daily Stand-Up meeting",
            "content": [
              "프로젝트 진행 기간동안 매일 오후 2시에 30분 내외로 스탠드업미팅을 진행했습니다.",
              "진행상황을 공유하고 공유해야할 이슈를 공유했습니다."
            ]
          },
          {
            "title": "GIT Flow 방식",
            "content": [
              "개발 사항을 main 브랜치에 병합하지 않고 develop 브랜치에 병합하고 마지막에 main branch에 병합했습니다.",
              "새로운 UI 또는 기능을 구현할 때 또는 발견된 버그를 처리할 때 마다 Issue를 등록해 팀원들의 진행상황을 tracking 할 수 있도록했습니다.",
              "Issue를 등록할 때 태그를 적극적으로 활용했고 작업 내용을 구체적으로 작성했습니다.",
              "commit을 남길 때 헤더-바디-푸터 구조로 작성하여 작업 내용을 세세하게 기록할 수 있도록 했습니다. 푸터에 Issue 번호를 적어서 어떤 Issue에 속한 작업인지 기록했습니다.",
              "PR은 하나의 Issue가 완료 될 때 마다 올렸습니다. PR이 Issue와 연동되도록했습니다."
            ]
          }
        ],
        "Feature": [
          {
            "page_name": "메인 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-mainpage.gif",
            "features": [
              {
                "feature_name": "Drop down menu",
                "code_img": [
                  "/public/images/projects/features/modu/modu-dropdownmenu.png"
                ],
                "explain": [
                  "조건부 함수와 MouseEnter 이벤트를 활용해 드롭다운 메뉴를 구현했습니다."
                ]
              },
              {
                "feature_name": "Carousel 베너 광고",
                "code_img": [
                  "/public/images/projects/features/modu/modu-carousel.png"
                ],
                "explain": [
                  "swiper 라이브러리를 사용해 베너 광고 부분을 carousel로 구현했습니다.",
                  "참고 사이트가 리뉴얼에 들어가서 참고할 이미지가 없었습니다. 핀터레스트에 베너 광고 이미지들을 검색해서 디자인을 참고하여 직접 제작했습니다."
                ]
              },
              {
                "feature_name": "신상품 및 인기상품 리스트 ",
                "code_img": [
                  "/public/images/projects/features/modu/modu-mainpagelist.png"
                ],
                "explain": [
                  "신상품과 인기상품 리스트부분은 라이브러리를 따로 사용하지 않고 JavaScript로 직접 슬라이드 기능을 구현했습니다.",
                  "아이템카드 컴포넌트를 재사용하여 리스트를 구현했습니다.",
                  "표현식과 useParams를 활용해 상품을 클릭했을 때 해당 상품의 상세페이지로 넘어갈 수 있도록 동적라우팅을 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "상품 리스트 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-category.gif",
            "features": [
              {
                "feature_name": "정렬 기능",
                "code_img": [
                  "/public/images/projects/features/modu/modu-ordering.png"
                ],
                "explain": [
                  "백엔드와 통신하여 추천순, 판매량순, 낮은 가격순 , 높은 가격 순 정렬기능을 구현했습니다.",
                  "정렬조건이 바뀔 때 마다 state값이 변경 되도록 하고 이 state 값을 통신 요청 URI에 표현식으로 넣어서",
                  "state 값이 변경 되면 요청 URI가 변경되어 조건에 맞는 정렬 순서대로 데이터를 받아와 출력하도록 구현했습니다."
                ]
              },
              {
                "feature_name": "무한스크롤 기능",
                "code_img": [
                  "/public/images/projects/features/modu/modu-infinitescroll.png"
                ],
                "explain": [
                  "windows의 scroll height 와 scroll event를 활용하여 무한스크롤 기능을 구현했습니다.",
                  "스크롤이 끝에 닿을 때 마다 offset이라는 state를 1씩 증가되게 하고 이 offset을 요청 URI에 표현식으로 넣어서 계속해서 추가로 데이터를 요청하도록 구현했습니다.",
                  "하지만 데이터의 양이 한정적이어서 실제로는 한번 밖에 상품 리스트가 추가되지 않아 이 부분이 아쉬웠습니다.",
                  "useEffect의 의존성 배열과 표현식, return함수를 활용해 정렬기능이 적용된 상태에서 무한스크롤이 작동할 수 있도록 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "장바구니 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-cart.gif",
            "features": [
              {
                "feature_name": "장바구니 수량변경, 삭제 기능 구현",
                "code_img": [
                  "/public/images/projects/features/modu/modu-cart.png"
                ],
                "explain": [
                  "버튼에 value값을 부여해 해당 아이템의 수량/가격만 변동및 삭제되도록 구현했습니다.",
                  "map함수와 reduce함수를 사용해 제품가격, 총배송비, 총결제가격을 표시하고 변동을 트래킹할 수 있도록 구현했습니다."
                ]
              }
            ]
          },
          {
            "page_name": "제작자 페이지",
            "page_gif": "/public/images/projects/features/modu/modu-developer.gif",
            "features": [
              {
                "feature_name": "팀원 프로필 카드 제작",
                "code_img": [
                  "/public/images/projects/features/modu/modu-developers.png"
                ],
                "explain": [
                  "팀원들의 아바타를 아이폰 이모지 기능을 활용해 직접 제작했습니다.",
                  "새로운 파일을 생성하지 않고 itemCard 컴포넌트를 재사용하여 구현했습니다."
                ]
              }
            ]
          }
        ],
        "Trouble_Shooting": [
          {
            "title": "클론 페이지 리뉴얼 이슈",
            "explain": [
              "프로젝트를 시작하고 얼마 지나지 않아 모두의 공방 페이지가 리뉴얼에 들어가서 UI 및 기능들이 보이지 않았습니다.",
              "프론트 개발자에게는 눈을 감고 개발을 하라는 격이었기 때문에 상당히 당황스러웠습니다."
            ],
            "subtitle": "문제 상황 파악",
            "figure_out": [
              "먼저 모두의 공방 고객센터에 전화해 상황을 파악했습니다. 대대적으로 리뉴얼에 들어갔기 때문에 2개월 정도 소요된다는 답변을 받았고 기다리고만 있을 수 없다는 판단을 내렸습니다.",
              "결국 저희만의 사이트를 만들기로 결정했고 팀원들과 자주 소통하며 디자인 부터 기능까지 저희가 직접 기획하고 구현했습니다."
            ],
            "subtitle_2": "문제 해결 과정",
            "problem_solving": [
              "저희는 먼저 구현할 기능들을 명확하게  정했습니다. 마이페이지의 경우 user의 정보와 구매 목록 및 찜 목록을 출력하고 구매 목록에서 ‘리뷰 작성하기’ 버튼을 누르면 해당 상품의 리뷰를 작성할 수 있도록 리뷰작성 페이지로 넘어가도록 하는 목표를 세웠습니다.",
              "그리고 목표와 유사한 웹페이지가 있는지 조사를 했습니다. 그 결과 무신사의 마이페이지가 저희가 기획한 바와 유사하게 구성이 되어있었습니다. 이에 무신사의 마이페이지를 참고하여 제작하기로 결정했습니다.",
              "장바구니 페이지의 경우 수량 변경 및 삭제 그리고 배송비와 전체 가격을 따로 계산하는 것을 목표로 했습니다.",
              "참고할 사이트를 조사하다가 오늘의 집의 장바구니 페이지가 저희 프로젝트와 디자인 무드도 잘 맞고 배송비 및 전체 가격 표시 되는 부분이 깔끔해서 오늘의 집을 참고하여 제작하기로 결정했습니다. "
            ],
            "subtitle_3": "느낀점",
            "lesson": [
              "처음에는 당황스러웠지만 직접 기획을하면서 사용자의 입장에서 서비스를 구축해볼 수 있는 좋은 기회였습니다. "
            ]
          }
        ],
        "Level_up": [
          "Git flow 방식으로 협업하는 방법을 배울 수 있었습니다.",
          "component 재사용의 편리성에 대해 느낄 수 있었습니다",
          "useEffect의 dependency array를 활용한 동적라우팅",
          "백엔드와 소통하여 offset & limit을 설정, 무한 스크롤 구현",
          "windows height를 활용하여 무한스크롤 구현"
        ],
        "review": [
          {
            "sub_titile": "클린코드의 중요성",
            "explain": [
              "그동안에는 구현에 집중하느라 클린 코딩의 중요성에 대해 생각할 겨를이 없었는데 이번 프로젝트는 팀원들의 코드들도 뜯어보면서 많이 배울 수 있었습니다. 특히 API 파일을 따로 관리해 임포트해서 쓰는 방식을 보고 다음 프로젝트 때 적용해봐야겠다 생각했습니다."
            ]
          },
          {
            "sub_titile": "최적화에 대하여...",
            "explain": [
              "리액트는 배울수록 아직 배울게 많다는 것을 느낍니다. 특히 최적화에 대한 이해도가 부족하다고 느껴 최적화에 대해 공부할 필요가 있다고 생각했습니다. 또한 프론트엔드 개발자에게 SEO도 정말 중요한데 다음 프로젝트 때는 최적화와 SEO 모두 신경 써서 작업해봐야겠다 생각했습니다."
            ]
          }
        ]
      }
    }
  ]
}
